version: "3.7"

networks:
  stocks:
    name: stocks
    driver: bridge


services:
  stock_service:
    container_name: stock_service
    image: nikulinme/stock_service
    links:
      - redis
    ports:
      - 8081:8081
    volumes:
      - ~/docker/redis:/redis-service/logs

    depends_on:
      - redis
    networks:
      - stocks
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:29092

  telegram_service:
    container_name: telegram_service
    image: nikulinme/telegram_service
    build: .
    links:
      - redis
    ports:
      - 8082:8080
    volumes:
      - ~/docker/redis:/redis-service/logs
    depends_on:
      - kafka
    networks:
      - stocks
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:29092


  redis:
    hostname: redis
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    command: [ "redis-server", "--protected-mode", "no", "--bind", "0.0.0.0" ]
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - cache:/data
    networks:
      - stocks
    depends_on:
      - kafka

  zookeeper:
    hostname: zookeeper
    image: zookeeper
    container_name: zookeeper
    restart: "always"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - stocks
    ports:
      - "2181:2181"

  kafka:
    hostname: kafka
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "always"
    networks:
      - stocks
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "always"
    networks:
      - stocks
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

volumes:
  cache:
    driver: local

